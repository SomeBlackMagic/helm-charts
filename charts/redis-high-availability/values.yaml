# https://github.com/haproxytech/helm-charts/blob/main/haproxy/values.yaml
haproxy:
  ## Pod termination grace period
  ## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  terminationGracePeriodSeconds: 30

  ## Container listener port configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
  containerPorts: # has to match hostPorts when useHostNetwork is true
    stat: 1024
    redisread: 6380
    rediswrite: 6379
    prometheus: 9101

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 20%
      maxSurge: 1

  lifecycle:
    preStop:
      exec:
        command: ["/bin/sh", "-c", "kill -USR1 $(pidof haproxy); while killall -0 haproxy; do sleep 1; done"]

  config: |+
    global
        daemon
        maxconn {{ $.Values.configmap.global.maxconn }}
        log stdout local0 debug

    defaults
        log global
        mode tcp
        timeout connect {{ $.Values.configmap.defaults.timeoutConnect }}
        timeout client {{ $.Values.configmap.defaults.timeoutClient }}
        timeout server {{ $.Values.configmap.defaults.timeoutServer }}

    {{- if $.Values.configmap.frontendHttpEnabled }}
    frontend http
        bind :1024
        default_backend stats
    {{- end }}

    frontend metrics
        bind *:9101
        mode http
        http-request use-service prometheus-exporter if { path /metrics }

    {{- with $.Values.configmap.backendStats }}
    backend stats
        mode http
        stats enable
        stats uri {{ .uri }}
        stats refresh {{ .refresh }}
        stats show-legends
        stats admin if {{ .admin }}
    {{- end }}

    resolvers k8s
      parse-resolv-conf
      hold other {{ $.Values.configmap.resolvers.holdOther }}
      hold refused {{ $.Values.configmap.resolvers.holdRefused }}
      hold nx {{ $.Values.configmap.resolvers.holdNx }}
      hold timeout {{ $.Values.configmap.resolvers.holdTimeout }}
      hold valid {{ $.Values.configmap.resolvers.holdValid }}
      hold obsolete {{ $.Values.configmap.resolvers.holdObsolete }}

    frontend redis-read
        bind *:{{ $.Values.configmap.frontend.redisReadPort }}
        default_backend redis-online

    frontend redis-write
        bind *:{{ $.Values.configmap.frontend.redisWritePort }}
        default_backend redis-primary

        backend redis-primary
        mode tcp
        balance {{ $.Values.configmap.backend.balanceAlgorithm }}
        option tcp-smart-connect
        option tcpka
        option tcp-check
        {{- if  $.Values.redis.auth.enabled }}
        tcp-check send AUTH\ {{ include "redis-ha.password" $ }}\r\n
        {{- end }}
        tcp-check expect string +OK
        tcp-check send info\ replication\r\n
        tcp-check expect string role:master

        {{- range $i := until (int  $.Values.redis.replica.replicaCount) }}
        server redis-node-{{ $i }} {{ $.Release.Name }}-node-{{ $i }}.{{ $.Release.Name }}-headless.{{ $.Release.Namespace }}.svc.{{  $.Values.clusterDomain }}:6379 resolvers k8s check inter {{ $.Values.configmap.backend.healthCheck.interval }} rise {{ $.Values.configmap.backend.healthCheck.rise }} fall {{ $.Values.configmap.backend.healthCheck.fall }}
        {{- end }}


    backend redis-online
        mode tcp
        balance {{ $.Values.configmap.backend.balanceAlgorithm }}

        {{- range $i := until (int  $.Values.redis.replica.replicaCount) }}
        server redis-node-{{ $i }} {{ $.Release.Name }}-node-{{ $i }}.{{ $.Release.Name }}-headless.{{ $.Release.Namespace }}.svc.{{  $.Values.clusterDomain }}:6379 resolvers k8s check inter {{ $.Values.configmap.backend.healthCheck.interval }} rise {{ $.Values.configmap.backend.healthCheck.rise }} fall {{ $.Values.configmap.backend.healthCheck.fall }}
        {{- end }}

  serviceMonitor:
    ## Toggle the ServiceMonitor true if you have Prometheus Operator installed and configured
    enabled: true

  redis:
    auth:
      enabled: false
      password: ~

    replica:
      replicaCount: ~

  configmap:
    global:
      maxconn: 256

    defaults:
      timeoutConnect: "5000ms"
      timeoutClient: "50000ms"
      timeoutServer: "50000ms"

    frontendHttpEnabled: true

    backendStats:
      uri: "/"
      refresh: "1s"
      admin: "TRUE"

    frontend:
      redisReadPort: 6380
      redisWritePort: 6379

    backend:
      balanceAlgorithm: "first"
      healthCheck:
        interval: "2s"
        rise: 2
        fall: 2

    resolvers:
      holdOther: "10s"
      holdRefused: "10s"
      holdNx: "10s"
      holdTimeout: "10s"
      holdValid: "10s"
      holdObsolete: "10s"


redis:
  ## @param architecture Redis(TM) architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: replication

  auth:
    enabled: true
    existingSecret: '{{ .Release.Name }}-redis-auth'
    existingSecretPasswordKey: "redis-password"

  sentinel:
    enabled: true
